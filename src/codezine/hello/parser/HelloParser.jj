/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. HelloParser.jj */
/*@egen*///\u30aa\u30d7\u30b7\u30e7\u30f3\u5b9a\u7fa9
options{
    STATIC=false;
               
                 
                                           
}

//\u30d1\u30fc\u30b5\u30fc\u30af\u30e9\u30b9\u306e\u5b9a\u7fa9
PARSER_BEGIN(HelloParser)
package codezine.hello.parser;
public class HelloParser/*@bgen(jjtree)*/implements HelloParserTreeConstants/*@egen*/{/*@bgen(jjtree)*/
  protected JJTHelloParserState jjtree = new JJTHelloParserState();

/*@egen*/

}
PARSER_END(HelloParser)

//\u30c8\u30fc\u30af\u30f3\u306e\u5b9a\u7fa9
SKIP:
{
    " " | "\r" | "\t" | "\n"
}
TOKEN:
{
        <HELLO: "hello">
    |   <JAVACC: "javacc">
    |   <JJTREE: "jjtree">
    |   <NAME: (["A"-"Z", "a"-"z"])+>
}

//\u6587\u6cd5\u306e\u5b9a\u7fa9
ASTHello Hello():
{/*@bgen(jjtree) Hello */
  ASTHello jjtn000 = new ASTHello(JJTHELLO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Hello */
    try {
/*@egen*/
    <HELLO> Command()/*@bgen(jjtree)*/
                      {
                        jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
                      }
/*@egen*/ { return jjtn000;}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Command()       :
{}
{
        JavaCC()
    |   JJTree()
    |   Name()
}

void JavaCC():
{/*@bgen(jjtree) JavaCC */
  ASTJavaCC jjtn000 = new ASTJavaCC(JJTJAVACC);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) JavaCC */
    try {
/*@egen*/
    <JAVACC>/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void JJTree():
{/*@bgen(jjtree) JJTree */
  ASTJJTree jjtn000 = new ASTJJTree(JJTJJTREE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) JJTree */
    try {
/*@egen*/
    <JJTREE>/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Name():
{/*@bgen(jjtree) Name */
  ASTName jjtn000 = new ASTName(JJTNAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t;}
{/*@bgen(jjtree) Name */
    try {
/*@egen*/
    t = <NAME>/*@bgen(jjtree)*/
               {
                 jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
               }
/*@egen*/ { jjtn000.nodeValue = t.image;}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

